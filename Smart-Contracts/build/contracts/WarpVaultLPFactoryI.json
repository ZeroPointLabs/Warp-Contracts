{
  "contractName": "WarpVaultLPFactoryI",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timelock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lp",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_lpName",
          "type": "string"
        }
      ],
      "name": "createWarpVaultLP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timelock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_lpName\",\"type\":\"string\"}],\"name\":\"createWarpVaultLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"createWarpVaultLP(uint256,address,string)\":{\"params\":{\"_lp\":\"is the address for the LP token this Warp Vault will manage\",\"_lpName\":\"is the name of the LP token (ex:wETH-wBTC)*\"}}}},\"userdoc\":{\"methods\":{\"createWarpVaultLP(uint256,address,string)\":{\"notice\":\"createWarpVaultLP allows the contract owner to create a new WarpVaultLP contract for a specific LP token\"}},\"notice\":\"The WarpVaultLPFactory contract is designed to produce individual WarpVaultLP contracts This contract uses the OpenZeppelin contract Library to inherit functions from Ownable.sol*\"}},\"settings\":{\"compilationTarget\":{\"/home/stan36/repos/Warp/Smart-Contracts/contracts/interfaces/WarpVaultLPFactoryI.sol\":\"WarpVaultLPFactoryI\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/stan36/repos/Warp/Smart-Contracts/contracts/interfaces/WarpVaultLPFactoryI.sol\":{\"keccak256\":\"0xae80dfb3502d720333ca1eaf9c68fd0357d89f34c3b36f20cd1e6fbe83bb4552\",\"urls\":[\"bzz-raw://8b2467f4c401215e4c4348e6401de89ff88a3876c0fb90a1f158056cad4dd5fc\",\"dweb:/ipfs/QmZabLFBYMa8LYa5jrY4zACvo2sZeK4viFuPnnfDxMQfkW\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "pragma solidity ^0.6.0;\n\n////////////////////////////////////////////////////////////////////////////////////////////\n/// @title WarpVaultLPFactoryI\n/// @author Christopher Dixon\n////////////////////////////////////////////////////////////////////////////////////////////\n/**\nThe WarpVaultLPFactory contract is designed to produce individual WarpVaultLP contracts\nThis contract uses the OpenZeppelin contract Library to inherit functions from\n  Ownable.sol\n**/\n\nabstract contract WarpVaultLPFactoryI {\n    /**\n      @notice createWarpVaultLP allows the contract owner to create a new WarpVaultLP contract for a specific LP token\n      @param _lp is the address for the LP token this Warp Vault will manage\n      @param _lpName is the name of the LP token (ex:wETH-wBTC)\n      @param _lpName is the name of the LP token (ex:wETH-wBTC)\n      **/\n    function createWarpVaultLP(uint256 _timelock, address _lp, string memory _lpName)\n        public\n        virtual\n        returns (address);\n\n    function transferOwnership(address _newOwner) public virtual;\n\n}\n",
  "sourcePath": "/home/stan36/repos/Warp/Smart-Contracts/contracts/interfaces/WarpVaultLPFactoryI.sol",
  "ast": {
    "absolutePath": "/home/stan36/repos/Warp/Smart-Contracts/contracts/interfaces/WarpVaultLPFactoryI.sol",
    "exportedSymbols": {
      "WarpVaultLPFactoryI": [
        7082
      ]
    },
    "id": 7083,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7063,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:22"
      },
      {
        "abstract": true,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 7064,
          "nodeType": "StructuredDocumentation",
          "src": "272:188:22",
          "text": "The WarpVaultLPFactory contract is designed to produce individual WarpVaultLP contracts\nThis contract uses the OpenZeppelin contract Library to inherit functions from\nOwnable.sol*"
        },
        "fullyImplemented": false,
        "id": 7082,
        "linearizedBaseContracts": [
          7082
        ],
        "name": "WarpVaultLPFactoryI",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": {
              "id": 7065,
              "nodeType": "StructuredDocumentation",
              "src": "506:337:22",
              "text": "@notice createWarpVaultLP allows the contract owner to create a new WarpVaultLP contract for a specific LP token\n@param _lp is the address for the LP token this Warp Vault will manage\n@param _lpName is the name of the LP token (ex:wETH-wBTC)\n@param _lpName is the name of the LP token (ex:wETH-wBTC)*"
            },
            "functionSelector": "a8edf115",
            "id": 7076,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createWarpVaultLP",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 7072,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7067,
                  "mutability": "mutable",
                  "name": "_timelock",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 7076,
                  "src": "875:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7066,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "875:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7069,
                  "mutability": "mutable",
                  "name": "_lp",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 7076,
                  "src": "894:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7068,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "894:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7071,
                  "mutability": "mutable",
                  "name": "_lpName",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 7076,
                  "src": "907:21:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 7070,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "907:6:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "874:55:22"
            },
            "returnParameters": {
              "id": 7075,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7074,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 7076,
                  "src": "978:7:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7073,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "978:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "977:9:22"
            },
            "scope": 7082,
            "src": "848:139:22",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": null,
            "functionSelector": "f2fde38b",
            "id": 7081,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferOwnership",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 7079,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7078,
                  "mutability": "mutable",
                  "name": "_newOwner",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 7081,
                  "src": "1020:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7077,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1020:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1019:19:22"
            },
            "returnParameters": {
              "id": 7080,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1053:0:22"
            },
            "scope": 7082,
            "src": "993:61:22",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          }
        ],
        "scope": 7083,
        "src": "462:595:22"
      }
    ],
    "src": "0:1058:22"
  },
  "legacyAST": {
    "absolutePath": "/home/stan36/repos/Warp/Smart-Contracts/contracts/interfaces/WarpVaultLPFactoryI.sol",
    "exportedSymbols": {
      "WarpVaultLPFactoryI": [
        7082
      ]
    },
    "id": 7083,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7063,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:22"
      },
      {
        "abstract": true,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 7064,
          "nodeType": "StructuredDocumentation",
          "src": "272:188:22",
          "text": "The WarpVaultLPFactory contract is designed to produce individual WarpVaultLP contracts\nThis contract uses the OpenZeppelin contract Library to inherit functions from\nOwnable.sol*"
        },
        "fullyImplemented": false,
        "id": 7082,
        "linearizedBaseContracts": [
          7082
        ],
        "name": "WarpVaultLPFactoryI",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": null,
            "documentation": {
              "id": 7065,
              "nodeType": "StructuredDocumentation",
              "src": "506:337:22",
              "text": "@notice createWarpVaultLP allows the contract owner to create a new WarpVaultLP contract for a specific LP token\n@param _lp is the address for the LP token this Warp Vault will manage\n@param _lpName is the name of the LP token (ex:wETH-wBTC)\n@param _lpName is the name of the LP token (ex:wETH-wBTC)*"
            },
            "functionSelector": "a8edf115",
            "id": 7076,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createWarpVaultLP",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 7072,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7067,
                  "mutability": "mutable",
                  "name": "_timelock",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 7076,
                  "src": "875:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 7066,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "875:7:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7069,
                  "mutability": "mutable",
                  "name": "_lp",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 7076,
                  "src": "894:11:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7068,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "894:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 7071,
                  "mutability": "mutable",
                  "name": "_lpName",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 7076,
                  "src": "907:21:22",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 7070,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "907:6:22",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "874:55:22"
            },
            "returnParameters": {
              "id": 7075,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7074,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 7076,
                  "src": "978:7:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7073,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "978:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "977:9:22"
            },
            "scope": 7082,
            "src": "848:139:22",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": null,
            "documentation": null,
            "functionSelector": "f2fde38b",
            "id": 7081,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferOwnership",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 7079,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 7078,
                  "mutability": "mutable",
                  "name": "_newOwner",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 7081,
                  "src": "1020:17:22",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 7077,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1020:7:22",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1019:19:22"
            },
            "returnParameters": {
              "id": 7080,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1053:0:22"
            },
            "scope": 7082,
            "src": "993:61:22",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          }
        ],
        "scope": 7083,
        "src": "462:595:22"
      }
    ],
    "src": "0:1058:22"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.6+commit.6c089d02.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.2",
  "updatedAt": "2020-12-10T23:21:40.516Z",
  "devdoc": {
    "methods": {
      "createWarpVaultLP(uint256,address,string)": {
        "params": {
          "_lp": "is the address for the LP token this Warp Vault will manage",
          "_lpName": "is the name of the LP token (ex:wETH-wBTC)*"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "createWarpVaultLP(uint256,address,string)": {
        "notice": "createWarpVaultLP allows the contract owner to create a new WarpVaultLP contract for a specific LP token"
      }
    },
    "notice": "The WarpVaultLPFactory contract is designed to produce individual WarpVaultLP contracts This contract uses the OpenZeppelin contract Library to inherit functions from Ownable.sol*"
  }
}