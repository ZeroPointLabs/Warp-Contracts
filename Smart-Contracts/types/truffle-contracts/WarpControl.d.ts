/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface WarpControlContract
  extends Truffle.Contract<WarpControlInstance> {
  "new"(
    _oracle: string,
    _WVLPF: string,
    _WVSCF: string,
    meta?: Truffle.TransactionDetails
  ): Promise<WarpControlInstance>;
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

type AllEvents = OwnershipTransferred;

export interface WarpControlInstance extends Truffle.ContractInstance {
  Oracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

  WVLPF(txDetails?: Truffle.TransactionDetails): Promise<string>;

  WVSCF(txDetails?: Truffle.TransactionDetails): Promise<string>;

  instanceLPTracker(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  instanceSCTracker(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isVault(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  liquidationIncentiveMantissa(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  lockedLPValue(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  lpVaults(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  scVaults(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * createNewVault allows the contract owner to create a new WarpVaultLP contract along with its associated Warp Wrapper Tokens*
   */
  createNewLPVault: {
    (
      _lp: string,
      _lpAsset1: string,
      _lpAsset2: string,
      _lpName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _lp: string,
      _lpAsset1: string,
      _lpAsset2: string,
      _lpName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _lp: string,
      _lpAsset1: string,
      _lpAsset2: string,
      _lpName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _lp: string,
      _lpAsset1: string,
      _lpAsset2: string,
      _lpName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createNewSCVault: {
    (
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      _initialExchangeRate: number | BN | string,
      _StableCoin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      _initialExchangeRate: number | BN | string,
      _StableCoin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      _initialExchangeRate: number | BN | string,
      _StableCoin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      _initialExchangeRate: number | BN | string,
      _StableCoin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * lockCollateralDown is an external function used to track locked collateral amounts globally as they decrease
   * @param _amount is the amount of LP being collateralized*
   * @param _borrower is the address of the borrower
   */
  unlockColateral: {
    (
      _borrower: string,
      _redeemer: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _borrower: string,
      _redeemer: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _borrower: string,
      _redeemer: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _borrower: string,
      _redeemer: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  checkLPprice(
    _LP: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * checkCollateralValue is a view function that accepts an account address and returns the total USDC value of the accounts locked collateral
   * @param _account is the address whos collateral value we are looking up*
   */
  checkTotalAvailableCollateralValue(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  borrowSC: {
    (
      _StableCoin: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _StableCoin: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _StableCoin: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _StableCoin: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    Oracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

    WVLPF(txDetails?: Truffle.TransactionDetails): Promise<string>;

    WVSCF(txDetails?: Truffle.TransactionDetails): Promise<string>;

    instanceLPTracker(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    instanceSCTracker(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    isVault(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    liquidationIncentiveMantissa(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    lockedLPValue(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    lpVaults(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    scVaults(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * createNewVault allows the contract owner to create a new WarpVaultLP contract along with its associated Warp Wrapper Tokens*
     */
    createNewLPVault: {
      (
        _lp: string,
        _lpAsset1: string,
        _lpAsset2: string,
        _lpName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _lp: string,
        _lpAsset1: string,
        _lpAsset2: string,
        _lpName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _lp: string,
        _lpAsset1: string,
        _lpAsset2: string,
        _lpName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _lp: string,
        _lpAsset1: string,
        _lpAsset2: string,
        _lpName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    createNewSCVault: {
      (
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        _initialExchangeRate: number | BN | string,
        _StableCoin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        _initialExchangeRate: number | BN | string,
        _StableCoin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        _initialExchangeRate: number | BN | string,
        _StableCoin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        _initialExchangeRate: number | BN | string,
        _StableCoin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * lockCollateralDown is an external function used to track locked collateral amounts globally as they decrease
     * @param _amount is the amount of LP being collateralized*
     * @param _borrower is the address of the borrower
     */
    unlockColateral: {
      (
        _borrower: string,
        _redeemer: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _borrower: string,
        _redeemer: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _borrower: string,
        _redeemer: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _borrower: string,
        _redeemer: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    checkLPprice(
      _LP: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * checkCollateralValue is a view function that accepts an account address and returns the total USDC value of the accounts locked collateral
     * @param _account is the address whos collateral value we are looking up*
     */
    checkTotalAvailableCollateralValue(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    borrowSC: {
      (
        _StableCoin: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _StableCoin: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _StableCoin: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _StableCoin: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
