/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface WarpControlContract
  extends Truffle.Contract<WarpControlInstance> {
  "new"(
    _oracle: string,
    _WVLPF: string,
    _WVSCF: string,
    _warpTeam: string,
    meta?: Truffle.TransactionDetails
  ): Promise<WarpControlInstance>;
}

export interface Liquidation {
  name: "Liquidation";
  args: {
    _account: string;
    liquidator: string;
    0: string;
    1: string;
  };
}

export interface NewBorrow {
  name: "NewBorrow";
  args: {
    _borrower: string;
    _StableCoin: string;
    _amountBorrowed: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface NewLPVault {
  name: "NewLPVault";
  args: {
    _newVault: string;
    0: string;
  };
}

export interface NewSCVault {
  name: "NewSCVault";
  args: {
    _newVault: string;
    _interestRateModel: string;
    0: string;
    1: string;
  };
}

export interface NotCompliant {
  name: "NotCompliant";
  args: {
    _account: string;
    _time: BN;
    0: string;
    1: BN;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface complianceReset {
  name: "complianceReset";
  args: {
    _account: string;
    _time: BN;
    0: string;
    1: BN;
  };
}

type AllEvents =
  | Liquidation
  | NewBorrow
  | NewLPVault
  | NewSCVault
  | NotCompliant
  | OwnershipTransferred
  | complianceReset;

export interface WarpControlInstance extends Truffle.ContractInstance {
  Oracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

  WVLPF(txDetails?: Truffle.TransactionDetails): Promise<string>;

  WVSCF(txDetails?: Truffle.TransactionDetails): Promise<string>;

  amountForUserByGroup(
    arg0: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  existingRefferalCode(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  groups(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  instanceLPTracker(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  instanceSCTracker(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isInGroup(
    arg0: string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isParticipant(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isVault(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  launchParticipants(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  lockedLPValue(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  lpLockedForUserByGroup(
    arg0: string,
    arg1: string,
    arg2: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  lpVaults(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  refferalCodeToGroupName(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  refferalCodeTracker(
    arg0: string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  scVaults(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  warpTeam(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * view functions for front end /////
   */
  viewNumLPVaults(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  viewNumSCVaults(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  viewLaunchParticipants(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  viewAllGroups(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  viewAllMembersOfAGroup(
    _refferalCode: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  viewSClockedForUserByGroup(
    _refferalCode: string,
    _member: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  viewLPlockedForUserByGroup(
    _refferalCode: string,
    _member: string,
    _lp: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getGroupName(
    _refferalCode: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * createNewLPVault allows the contract owner to create a new WarpVaultLP contract for a specific LP token
   * @param _lp is the address for the LP token this Warp Vault will manage
   * @param _lpAsset1 is the address for the first asset in a pair that the LP token represents(ex: wETH in a wETH-wBTC uniswap pair)
   * @param _lpAsset2 is the address for the second asset in a pair that the LP token represents(ex: wBTC in a wETH-wBTC uniswap pair)
   * @param _lpName is the name of the LP token (ex:wETH-wBTC)*
   * @param _timelock is a variable representing the number of seconds the timeWizard will prevent withdraws and borrows from a contracts(one week is 605800 seconds)
   */
  createNewLPVault: {
    (
      _timelock: number | BN | string,
      _lp: string,
      _lpAsset1: string,
      _lpAsset2: string,
      _lpName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _timelock: number | BN | string,
      _lp: string,
      _lpAsset1: string,
      _lpAsset2: string,
      _lpName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _timelock: number | BN | string,
      _lp: string,
      _lpAsset1: string,
      _lpAsset2: string,
      _lpName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _timelock: number | BN | string,
      _lp: string,
      _lpAsset1: string,
      _lpAsset2: string,
      _lpName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * createNewSCVault allows the contract owner to create a new WarpVaultLP contract for a specific LP token
   * @param _StableCoin is the address of the StableCoin this Warp Vault will manage*
   * @param _baseRatePerYear is the base rate per year(approx target base APR)
   * @param _initialExchangeRate is the intitial exchange rate(the rate at which the initial exchange of asset/ART is set)
   * @param _jumpMultiplierPerYear is the Jump Multiplier Per Year(the multiplier per block after hitting a specific utilizastion point)
   * @param _multiplierPerYear is the multiplier per year(rate of increase in interest w/ utilizastion)
   * @param _optimal is the this is the utilizastion point or "kink" at which the jump multiplier is applied
   * @param _timelock is a variable representing the number of seconds the timeWizard will prevent withdraws and borrows from a contracts(one week is 605800 seconds)
   */
  createNewSCVault: {
    (
      _timelock: number | BN | string,
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      _initialExchangeRate: number | BN | string,
      _StableCoin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _timelock: number | BN | string,
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      _initialExchangeRate: number | BN | string,
      _StableCoin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _timelock: number | BN | string,
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      _initialExchangeRate: number | BN | string,
      _StableCoin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _timelock: number | BN | string,
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      _initialExchangeRate: number | BN | string,
      _StableCoin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createGroup: {
    (_groupName: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _groupName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _groupName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _groupName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addMemberToGroupSC: {
    (
      _refferalCode: string,
      _member: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _refferalCode: string,
      _member: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _refferalCode: string,
      _member: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _refferalCode: string,
      _member: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addMemberToGroupLP: {
    (
      _refferalCode: string,
      _member: string,
      _lp: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _refferalCode: string,
      _member: string,
      _lp: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _refferalCode: string,
      _member: string,
      _lp: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _refferalCode: string,
      _member: string,
      _lp: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Figures out how much of a given LP token an account is allowed to withdraw
   */
  getMaxWithdrawAllowed: {
    (
      account: string,
      lpToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      account: string,
      lpToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      account: string,
      lpToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      lpToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  viewMaxWithdrawAllowed(
    account: string,
    lpToken: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getTotalAvailableCollateralValue: {
    (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_account: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  viewTotalAvailableCollateralValue(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  viewPriceOfCollateral(
    lpToken: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  viewPriceOfToken(
    token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  viewTotalBorrowedValue(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getTotalBorrowedValue: {
    (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_account: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * this function divides the input value by 3 and then adds that value to itself so it can return 2/3rds of the availible collateral as the borrow limit. If a usser has $150 USDC value in collateral this function will return $100 USDC as their borrow limit.*
   * calcBorrowLimit is used to calculate the borrow limit for an account based on the input value of their collateral
   * @param _collateralValue is the USDC value of the users collateral
   */
  calcBorrowLimit(
    _collateralValue: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  calcCollateralRequired(
    _borrowAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getBorrowLimit: {
    (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_account: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  viewBorrowLimit(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * borrowSC is the function an end user will call when they wish to borrow a stablecoin from the warp platform
   * @param _StableCoin is the address of the stablecoin the user wishes to borrow
   * @param _amount is the amount of that stablecoin the user wants to borrow*
   */
  borrowSC: {
    (
      _StableCoin: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _StableCoin: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _StableCoin: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _StableCoin: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * markAccountNonCompliant is used by a potential liquidator to mark an account as non compliant which starts its 30 minute timer
   * @param _borrower is the address of the non compliant borrower*
   */
  markAccountNonCompliant: {
    (_borrower: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _borrower: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _borrower: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _borrower: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * liquidateAccount is used to liquidate a non-compliant loan after it has reached its 30 minute grace period
   * @param _borrower is the address of the borrower whos loan is non-compliant*
   */
  liquidateAccount: {
    (_borrower: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _borrower: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _borrower: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _borrower: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    Oracle(txDetails?: Truffle.TransactionDetails): Promise<string>;

    WVLPF(txDetails?: Truffle.TransactionDetails): Promise<string>;

    WVSCF(txDetails?: Truffle.TransactionDetails): Promise<string>;

    amountForUserByGroup(
      arg0: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    existingRefferalCode(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    groups(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    instanceLPTracker(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    instanceSCTracker(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    isInGroup(
      arg0: string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isParticipant(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    isVault(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    launchParticipants(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    lockedLPValue(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    lpLockedForUserByGroup(
      arg0: string,
      arg1: string,
      arg2: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    lpVaults(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    refferalCodeToGroupName(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    refferalCodeTracker(
      arg0: string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    scVaults(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    warpTeam(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * view functions for front end /////
     */
    viewNumLPVaults(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    viewNumSCVaults(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    viewLaunchParticipants(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    viewAllGroups(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    viewAllMembersOfAGroup(
      _refferalCode: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    viewSClockedForUserByGroup(
      _refferalCode: string,
      _member: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    viewLPlockedForUserByGroup(
      _refferalCode: string,
      _member: string,
      _lp: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getGroupName(
      _refferalCode: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * createNewLPVault allows the contract owner to create a new WarpVaultLP contract for a specific LP token
     * @param _lp is the address for the LP token this Warp Vault will manage
     * @param _lpAsset1 is the address for the first asset in a pair that the LP token represents(ex: wETH in a wETH-wBTC uniswap pair)
     * @param _lpAsset2 is the address for the second asset in a pair that the LP token represents(ex: wBTC in a wETH-wBTC uniswap pair)
     * @param _lpName is the name of the LP token (ex:wETH-wBTC)*
     * @param _timelock is a variable representing the number of seconds the timeWizard will prevent withdraws and borrows from a contracts(one week is 605800 seconds)
     */
    createNewLPVault: {
      (
        _timelock: number | BN | string,
        _lp: string,
        _lpAsset1: string,
        _lpAsset2: string,
        _lpName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _timelock: number | BN | string,
        _lp: string,
        _lpAsset1: string,
        _lpAsset2: string,
        _lpName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _timelock: number | BN | string,
        _lp: string,
        _lpAsset1: string,
        _lpAsset2: string,
        _lpName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _timelock: number | BN | string,
        _lp: string,
        _lpAsset1: string,
        _lpAsset2: string,
        _lpName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * createNewSCVault allows the contract owner to create a new WarpVaultLP contract for a specific LP token
     * @param _StableCoin is the address of the StableCoin this Warp Vault will manage*
     * @param _baseRatePerYear is the base rate per year(approx target base APR)
     * @param _initialExchangeRate is the intitial exchange rate(the rate at which the initial exchange of asset/ART is set)
     * @param _jumpMultiplierPerYear is the Jump Multiplier Per Year(the multiplier per block after hitting a specific utilizastion point)
     * @param _multiplierPerYear is the multiplier per year(rate of increase in interest w/ utilizastion)
     * @param _optimal is the this is the utilizastion point or "kink" at which the jump multiplier is applied
     * @param _timelock is a variable representing the number of seconds the timeWizard will prevent withdraws and borrows from a contracts(one week is 605800 seconds)
     */
    createNewSCVault: {
      (
        _timelock: number | BN | string,
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        _initialExchangeRate: number | BN | string,
        _StableCoin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _timelock: number | BN | string,
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        _initialExchangeRate: number | BN | string,
        _StableCoin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _timelock: number | BN | string,
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        _initialExchangeRate: number | BN | string,
        _StableCoin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _timelock: number | BN | string,
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        _initialExchangeRate: number | BN | string,
        _StableCoin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    createGroup: {
      (_groupName: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _groupName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _groupName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _groupName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addMemberToGroupSC: {
      (
        _refferalCode: string,
        _member: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _refferalCode: string,
        _member: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _refferalCode: string,
        _member: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _refferalCode: string,
        _member: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addMemberToGroupLP: {
      (
        _refferalCode: string,
        _member: string,
        _lp: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _refferalCode: string,
        _member: string,
        _lp: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _refferalCode: string,
        _member: string,
        _lp: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _refferalCode: string,
        _member: string,
        _lp: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Figures out how much of a given LP token an account is allowed to withdraw
     */
    getMaxWithdrawAllowed: {
      (
        account: string,
        lpToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account: string,
        lpToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        account: string,
        lpToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        lpToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    viewMaxWithdrawAllowed(
      account: string,
      lpToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getTotalAvailableCollateralValue: {
      (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    viewTotalAvailableCollateralValue(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    viewPriceOfCollateral(
      lpToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    viewPriceOfToken(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    viewTotalBorrowedValue(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getTotalBorrowedValue: {
      (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * this function divides the input value by 3 and then adds that value to itself so it can return 2/3rds of the availible collateral as the borrow limit. If a usser has $150 USDC value in collateral this function will return $100 USDC as their borrow limit.*
     * calcBorrowLimit is used to calculate the borrow limit for an account based on the input value of their collateral
     * @param _collateralValue is the USDC value of the users collateral
     */
    calcBorrowLimit(
      _collateralValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    calcCollateralRequired(
      _borrowAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getBorrowLimit: {
      (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    viewBorrowLimit(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * borrowSC is the function an end user will call when they wish to borrow a stablecoin from the warp platform
     * @param _StableCoin is the address of the stablecoin the user wishes to borrow
     * @param _amount is the amount of that stablecoin the user wants to borrow*
     */
    borrowSC: {
      (
        _StableCoin: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _StableCoin: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _StableCoin: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _StableCoin: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * markAccountNonCompliant is used by a potential liquidator to mark an account as non compliant which starts its 30 minute timer
     * @param _borrower is the address of the non compliant borrower*
     */
    markAccountNonCompliant: {
      (_borrower: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _borrower: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _borrower: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _borrower: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * liquidateAccount is used to liquidate a non-compliant loan after it has reached its 30 minute grace period
     * @param _borrower is the address of the borrower whos loan is non-compliant*
     */
    liquidateAccount: {
      (_borrower: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _borrower: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _borrower: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _borrower: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
