/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface WarpVaultContract extends Truffle.Contract<WarpVaultInstance> {
  "new"(
    _lp: string,
    _WarpControl: string,
    _lpName: string,
    meta?: Truffle.TransactionDetails
  ): Promise<WarpVaultInstance>;
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

type AllEvents = OwnershipTransferred;

export interface WarpVaultInstance extends Truffle.ContractInstance {
  DAI(txDetails?: Truffle.TransactionDetails): Promise<string>;

  InterestRate(txDetails?: Truffle.TransactionDetails): Promise<string>;

  LPtoken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  UOF(txDetails?: Truffle.TransactionDetails): Promise<string>;

  USDC(txDetails?: Truffle.TransactionDetails): Promise<string>;

  USDT(txDetails?: Truffle.TransactionDetails): Promise<string>;

  WC(txDetails?: Truffle.TransactionDetails): Promise<string>;

  WDAI(txDetails?: Truffle.TransactionDetails): Promise<string>;

  WLP(txDetails?: Truffle.TransactionDetails): Promise<string>;

  WUSDC(txDetails?: Truffle.TransactionDetails): Promise<string>;

  WUSDT(txDetails?: Truffle.TransactionDetails): Promise<string>;

  accountBorrowsDAI(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  accountBorrowsUSDC(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  accountBorrowsUSDT(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  accountLentDAI(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  accountLentUSDC(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  accountLentUSDT(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  accrualBlockNumber(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  borrowIndex(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  collateralAddressTracker(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  collateralLocked(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  liquidationIncentiveMantissa(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  lockTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  lpName(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  reserveFactorMantissa(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  totalBorrows(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  totalReserves(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * setUp is called after the creation of a WarpVault to set up its Interest Rate Model and its initial exchange rate
   * @param _baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)
   * @param _jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point
   * @param _multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)
   * @param _optimal The utilization point at which the jump multiplier is applied(Refered to as the Kink in the InterestRateModel)*
   */
  setUp: {
    (
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      _initialExchangeRate: number | BN | string,
      _oracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      _initialExchangeRate: number | BN | string,
      _oracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      _initialExchangeRate: number | BN | string,
      _oracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      _initialExchangeRate: number | BN | string,
      _oracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * This also accrues interest in a transaction
   * Get the underlying balance of an account
   * @param _account The address of the account to query
   */
  balanceOfUnderlying: {
    (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_account: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Get the underlying balance of the `owners`
   * @param owner The address of the account to query
   */
  balanceOfUnderlyingPrior(
    owner: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * This calculates interest accrued from the last checkpointed block up to the current block and writes new checkpoint to storage.*
   * Applies accrued interest to total borrows and reserves
   */
  accrueInterest: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * returns last calculated account's borrow balance using the prior borrowIndex
   * @param account The address whose balance should be calculated after updating borrowIndex
   */
  borrowBalancePrior(
    account: string,
    _assetType: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  /**
   * Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex
   * @param account The address whose balance should be calculated after updating borrowIndex
   */
  borrowBalanceCurrent: {
    (
      account: string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      account: string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      account: string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Returns the current per-block borrow interest rate for this cToken
   */
  borrowRatePerBlock(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Returns the current per-block supply interest rate for this cToken
   */
  supplyRatePerBlock(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * getSupplyAPY roughly calculates the current APY for supplying using an average of 6500 blocks per day*
   */
  getSupplyAPY(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * getSupplyAPY roughly calculates the current APY for borrowing using an average of 6500 blocks per day*
   */
  getBorrowAPY(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Returns the current total borrows plus accrued interest
   */
  totalBorrowsCurrent: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * return the not up-to-date exchange rate
   */
  exchangeRatePrior(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * Accrue interest then return the up-to-date exchange rate
   */
  exchangeRateCurrent: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Get cash balance of this cToken in the underlying asset in other contracts
   */
  getCash(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * the user will need to first approve the transfer of the underlying asset*
   * lendToWarpVault is used to lend stablecoin assets to a WaprVault
   * @param _amount is the amount of the asset being lent
   * @param _assetType is a number value 1-3 representing which asset is being lent
   */
  lendToWarpVault: {
    (
      _amount: number | BN | string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * redeem allows a user to redeem their Warp Wrapper Token for the appropriate amount of underlying stablecoin asset
   * @param _amount is the amount of Warp Wrapper token being exchanged
   * @param _assetType is a number representing which Wrapper type is being redeemed*
   */
  redeem: {
    (
      _amount: number | BN | string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Sender borrows stablecoin assets from the protocol to their own address
   * @param _borrowAmount The amount of the underlying asset to borrow
   */
  borrow: {
    (
      _borrowAmount: number | BN | string,
      _assetType: number | BN | string,
      _WarpVaultCollat: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _borrowAmount: number | BN | string,
      _assetType: number | BN | string,
      _WarpVaultCollat: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _borrowAmount: number | BN | string,
      _assetType: number | BN | string,
      _WarpVaultCollat: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _borrowAmount: number | BN | string,
      _assetType: number | BN | string,
      _WarpVaultCollat: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Sender repays their own borrow
   * @param repayAmount The amount to repay
   */
  repayBorrow: {
    (
      repayAmount: number | BN | string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      repayAmount: number | BN | string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      repayAmount: number | BN | string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      repayAmount: number | BN | string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * collateralizeLP allows a user to collateralize this contracts associated LP token
   * @param _amount is the amount of LP being collateralized*
   */
  collateralizeLP: {
    (
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * getAssetAdd allows for easy retrieval of a WarpVaults LP token Adress*
   */
  getAssetAdd(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * withdrawLP allows the user to trade in his WarpLP tokens for hiss underlying LP token collateral
   * @param _amount is the amount of LP tokens he wishes to withdraw*
   */
  withdrawLP: {
    (
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    DAI(txDetails?: Truffle.TransactionDetails): Promise<string>;

    InterestRate(txDetails?: Truffle.TransactionDetails): Promise<string>;

    LPtoken(txDetails?: Truffle.TransactionDetails): Promise<string>;

    UOF(txDetails?: Truffle.TransactionDetails): Promise<string>;

    USDC(txDetails?: Truffle.TransactionDetails): Promise<string>;

    USDT(txDetails?: Truffle.TransactionDetails): Promise<string>;

    WC(txDetails?: Truffle.TransactionDetails): Promise<string>;

    WDAI(txDetails?: Truffle.TransactionDetails): Promise<string>;

    WLP(txDetails?: Truffle.TransactionDetails): Promise<string>;

    WUSDC(txDetails?: Truffle.TransactionDetails): Promise<string>;

    WUSDT(txDetails?: Truffle.TransactionDetails): Promise<string>;

    accountBorrowsDAI(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;

    accountBorrowsUSDC(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;

    accountBorrowsUSDT(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;

    accountLentDAI(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    accountLentUSDC(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    accountLentUSDT(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    accrualBlockNumber(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    borrowIndex(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    collateralAddressTracker(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    collateralLocked(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    liquidationIncentiveMantissa(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    lockTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    lpName(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    reserveFactorMantissa(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    totalBorrows(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    totalReserves(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * setUp is called after the creation of a WarpVault to set up its Interest Rate Model and its initial exchange rate
     * @param _baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)
     * @param _jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point
     * @param _multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)
     * @param _optimal The utilization point at which the jump multiplier is applied(Refered to as the Kink in the InterestRateModel)*
     */
    setUp: {
      (
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        _initialExchangeRate: number | BN | string,
        _oracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        _initialExchangeRate: number | BN | string,
        _oracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        _initialExchangeRate: number | BN | string,
        _oracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        _initialExchangeRate: number | BN | string,
        _oracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * This also accrues interest in a transaction
     * Get the underlying balance of an account
     * @param _account The address of the account to query
     */
    balanceOfUnderlying: {
      (_account: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _account: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Get the underlying balance of the `owners`
     * @param owner The address of the account to query
     */
    balanceOfUnderlyingPrior(
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * This calculates interest accrued from the last checkpointed block up to the current block and writes new checkpoint to storage.*
     * Applies accrued interest to total borrows and reserves
     */
    accrueInterest: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * returns last calculated account's borrow balance using the prior borrowIndex
     * @param account The address whose balance should be calculated after updating borrowIndex
     */
    borrowBalancePrior(
      account: string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex
     * @param account The address whose balance should be calculated after updating borrowIndex
     */
    borrowBalanceCurrent: {
      (
        account: string,
        _assetType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account: string,
        _assetType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        account: string,
        _assetType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        _assetType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Returns the current per-block borrow interest rate for this cToken
     */
    borrowRatePerBlock(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Returns the current per-block supply interest rate for this cToken
     */
    supplyRatePerBlock(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * getSupplyAPY roughly calculates the current APY for supplying using an average of 6500 blocks per day*
     */
    getSupplyAPY(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * getSupplyAPY roughly calculates the current APY for borrowing using an average of 6500 blocks per day*
     */
    getBorrowAPY(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Returns the current total borrows plus accrued interest
     */
    totalBorrowsCurrent: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * return the not up-to-date exchange rate
     */
    exchangeRatePrior(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * Accrue interest then return the up-to-date exchange rate
     */
    exchangeRateCurrent: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Get cash balance of this cToken in the underlying asset in other contracts
     */
    getCash(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     * the user will need to first approve the transfer of the underlying asset*
     * lendToWarpVault is used to lend stablecoin assets to a WaprVault
     * @param _amount is the amount of the asset being lent
     * @param _assetType is a number value 1-3 representing which asset is being lent
     */
    lendToWarpVault: {
      (
        _amount: number | BN | string,
        _assetType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        _assetType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        _assetType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        _assetType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * redeem allows a user to redeem their Warp Wrapper Token for the appropriate amount of underlying stablecoin asset
     * @param _amount is the amount of Warp Wrapper token being exchanged
     * @param _assetType is a number representing which Wrapper type is being redeemed*
     */
    redeem: {
      (
        _amount: number | BN | string,
        _assetType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        _assetType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        _assetType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        _assetType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Sender borrows stablecoin assets from the protocol to their own address
     * @param _borrowAmount The amount of the underlying asset to borrow
     */
    borrow: {
      (
        _borrowAmount: number | BN | string,
        _assetType: number | BN | string,
        _WarpVaultCollat: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _borrowAmount: number | BN | string,
        _assetType: number | BN | string,
        _WarpVaultCollat: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _borrowAmount: number | BN | string,
        _assetType: number | BN | string,
        _WarpVaultCollat: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _borrowAmount: number | BN | string,
        _assetType: number | BN | string,
        _WarpVaultCollat: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Sender repays their own borrow
     * @param repayAmount The amount to repay
     */
    repayBorrow: {
      (
        repayAmount: number | BN | string,
        _assetType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        repayAmount: number | BN | string,
        _assetType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        repayAmount: number | BN | string,
        _assetType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        repayAmount: number | BN | string,
        _assetType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * collateralizeLP allows a user to collateralize this contracts associated LP token
     * @param _amount is the amount of LP being collateralized*
     */
    collateralizeLP: {
      (
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * getAssetAdd allows for easy retrieval of a WarpVaults LP token Adress*
     */
    getAssetAdd(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * withdrawLP allows the user to trade in his WarpLP tokens for hiss underlying LP token collateral
     * @param _amount is the amount of LP tokens he wishes to withdraw*
     */
    withdrawLP: {
      (
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
