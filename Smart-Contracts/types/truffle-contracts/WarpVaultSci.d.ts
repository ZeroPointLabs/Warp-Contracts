/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface WarpVaultSciContract
  extends Truffle.Contract<WarpVaultSciInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<WarpVaultSciInstance>;
}

type AllEvents = never;

export interface WarpVaultSciInstance extends Truffle.ContractInstance {
  /**
   * setUp is called after the creation of a WarpVault to set up its Interest Rate Model and its initial exchange rate
   * @param _baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)
   * @param _jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point
   * @param _multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)
   * @param _optimal The utilization point at which the jump multiplier is applied(Refered to as the Kink in the InterestRateModel)*
   */
  setUp: {
    (
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      _initialExchangeRate: number | BN | string,
      _oracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      _initialExchangeRate: number | BN | string,
      _oracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      _initialExchangeRate: number | BN | string,
      _oracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _baseRatePerYear: number | BN | string,
      _multiplierPerYear: number | BN | string,
      _jumpMultiplierPerYear: number | BN | string,
      _optimal: number | BN | string,
      _initialExchangeRate: number | BN | string,
      _oracle: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getAssetAdd(txDetails?: Truffle.TransactionDetails): Promise<string>;

  borrowBalanceCurrent: {
    (
      account: string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      account: string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      account: string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      _assetType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  exchangeRateCurrent: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    /**
     * setUp is called after the creation of a WarpVault to set up its Interest Rate Model and its initial exchange rate
     * @param _baseRatePerYear The approximate target base APR, as a mantissa (scaled by 1e18)
     * @param _jumpMultiplierPerYear The multiplierPerBlock after hitting a specified utilization point
     * @param _multiplierPerYear The rate of increase in interest rate wrt utilization (scaled by 1e18)
     * @param _optimal The utilization point at which the jump multiplier is applied(Refered to as the Kink in the InterestRateModel)*
     */
    setUp: {
      (
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        _initialExchangeRate: number | BN | string,
        _oracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        _initialExchangeRate: number | BN | string,
        _oracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        _initialExchangeRate: number | BN | string,
        _oracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _baseRatePerYear: number | BN | string,
        _multiplierPerYear: number | BN | string,
        _jumpMultiplierPerYear: number | BN | string,
        _optimal: number | BN | string,
        _initialExchangeRate: number | BN | string,
        _oracle: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getAssetAdd(txDetails?: Truffle.TransactionDetails): Promise<string>;

    borrowBalanceCurrent: {
      (
        account: string,
        _assetType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account: string,
        _assetType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        account: string,
        _assetType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        _assetType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    exchangeRateCurrent: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<BN>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
