/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface WarpControlIContract
  extends Truffle.Contract<WarpControlIInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<WarpControlIInstance>;
}

type AllEvents = never;

export interface WarpControlIInstance extends Truffle.ContractInstance {
  getMaxWithdrawAllowed: {
    (
      account: string,
      lpToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      account: string,
      lpToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      account: string,
      lpToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string,
      lpToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  viewPriceOfCollateral(
    lpToken: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  addMemberToGroup: {
    (
      _refferalCode: string,
      _member: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _refferalCode: string,
      _member: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _refferalCode: string,
      _member: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _refferalCode: string,
      _member: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  checkIfGroupMember(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    getMaxWithdrawAllowed: {
      (
        account: string,
        lpToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        account: string,
        lpToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        account: string,
        lpToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        account: string,
        lpToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    viewPriceOfCollateral(
      lpToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    addMemberToGroup: {
      (
        _refferalCode: string,
        _member: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _refferalCode: string,
        _member: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _refferalCode: string,
        _member: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _refferalCode: string,
        _member: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    checkIfGroupMember(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
